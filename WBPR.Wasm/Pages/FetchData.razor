@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using WBPR.Service.Models.Common
@using System.Text.Json
@inject HttpClient Http
@inject GraphServiceClient graphClient

@attribute [Authorize]

<PageTitle>Weather forecast</PageTitle>

<AuthorizeView>
    <Authorized>
        @*@if (user != null)
        {
            <p>User Name: @user.DisplayName</p>
            foreach(var file in listItem)
            {
                <p>@file.Id: @file.Name</p>
            }
        }*@
        @if(content!=null)
        {
            <p>target -- @content</p>
        }
    </Authorized>
</AuthorizeView>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private User user;
    private IDriveItemChildrenCollectionPage listItem;
    private string content = null;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

        //DriveItem folder = await GetId("WBPR_DATA 1");
        //if(folder!=null)
        //{
        //    await DeleteFolder(folder.Id);
        //}
        //await ListAll();
        await Get();
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async Task ListAll()
    {
        var request = graphClient.Me.Request();
        user = await request.GetAsync();
        var req2 = graphClient.Me.Drive.Root.Children.Request();
        listItem = await req2.GetAsync();
    }

    private async Task CreateFolder()
    {
        var driveItem = new DriveItem
            {
                Name = "WBPR_DATA",
                Folder = new Folder { },
                AdditionalData = new Dictionary<string, object>()
                {
                    {"@microsoft.graph.conflictBehavior", "rename"}
                }
            };
        await graphClient.Me.Drive.Root.Children.Request().AddAsync(driveItem);
    }

    private async Task<DriveItem> GetId(string name)
    {
        var itemList = await graphClient.Me.Drive.Root.Search(name).Request().GetAsync();
        var folder = itemList.SingleOrDefault(x => x.Folder != null && x.Name == name);
        return folder;
    }

    private async Task DeleteFolder(string itemId)
    {
        await graphClient.Me.Drive.Items[itemId]
            .Request()
            .DeleteAsync();
    }

    private async Task Get()
    {
        string fileName = "WPBR_DATA_20221004";
        var target = await graphClient.Me.Drive.Root.ItemWithPath("WPBR_DATA/WPBR_DATA_20221006").Content.Request().GetAsync();
        if (target != null)
        {
            using MemoryStream ms = new MemoryStream();
            target.Seek(0, SeekOrigin.Begin);
            target.CopyTo(ms);
            byte[] data = ms.ToArray();
            using StreamReader sr = new StreamReader(new MemoryStream(data));
            content = sr.ReadToEnd();

        }
    }
}
