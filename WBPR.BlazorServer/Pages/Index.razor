@page "/"
@using System
@using System.IO
@using WBPR.Service.Models.Common
@using WBPR.Service.Utils
@using Microsoft.Extensions.Logging
@using WBPR.Service.Constants
@using WBPR.Service.Interfaces
@using Microsoft.Extensions.Localization
@using WBPR.BlazorServer.Utils
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.Identity.Web
@using WBPR.Service.Models.Response
@inject IStringLocalizer<Index> langLoc
@inject IJSRuntime jsRuntime
@inject ILogger<Index> logger
@inject ISnackbar snackbar
@inject IPreachReportService preachReportService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@attribute [Authorize]

<PageTitle>WBPR - @langLoc["PageTitle"]</PageTitle>

<MudOverlay @bind-Visible="isLoading" DarkBackground="true" AutoClose="true" />
@if (isLoading)
{
    <div id="loadingProgress">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}

<div id="saveBtn">
    <MudFab StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="@(async()=>await Update())" />
</div>

<MudStack AlignItems="AlignItems.Center">
    <MudItem>
        <MudPaper Class="pa-4" Elevation="4" Width="280px">
            <MudText Typo="Typo.h6" Align="Align.Center">@month@langLoc["MonthSummary"]</MudText>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-6" />
            <MudText Typo="Typo.body1">@langLoc["MonthHour"]: @monthHours</MudText>
            <br />
            <MudText Typo="Typo.body1">@langLoc["MonthDistributeNum"]: @monthDistributeNum</MudText>
            <br />
            <MudText Typo="Typo.body1">@langLoc["MonthMediaPlayNum"]: @monthMediaPlayNum</MudText>
            <br />
            <MudText Typo="Typo.body1">@langLoc["MonthReviewNum"]: @monthReviewNum</MudText>
            <br />
            <MudText Typo="Typo.body1">@langLoc["MonthBibleStudyNum"]: @monthBibleStudyNum</MudText>
        </MudPaper>
    </MudItem>

    
    <MudItem>
        <MudPaper Class="pa-4" Elevation="4" Width="280px">
            <MudText Typo="Typo.h6" Align="Align.Center">@langLoc["OverviewTitle"]</MudText>
            <MudDivider DividerType="DividerType.Middle" Class="my-6" />
            <MudDatePicker Date="displayPreachDate" Label="日期"
                           DateChanged="@(async(arg)=> await PreachDateChanged(arg))" MaxDate="maxDate" />
            <br />
            <MudNumericField @bind-Value="prData.ReviewNum" Label="@langLoc["ReviewNum"]" Variant="Variant.Outlined"
                             Min="prData.BibleStudyNum>0?1:0" Max="1000" />
            <br />
            <MudNumericField Value="prData.BibleStudyNum" Label="@langLoc["BibleStudyNum"]" Variant="Variant.Outlined"
                             Min="0" Max="1000" ValueChanged="BibleStudyNumChanged" T="int" />
            <br />
            <MudNumericField @bind-Value="prData.DistributeNum" Label="@langLoc["DistributeNum"]"
                             Variant="Variant.Outlined" Min="0" Max="1000" />
            <br />
            <MudNumericField @bind-Value="prData.MediaPlayNum" Label="@langLoc["MediaPlayNum"]" Variant="Variant.Outlined"
                             Min="0" Max="1000" />
        </MudPaper>
    </MudItem>

    
    <MudItem>
        <MudPaper Class="pa-4" Elevation="4" Width="280px">
            <MudText Typo="Typo.h6" Align="Align.Center">@langLoc["TimeTitle"]</MudText>
            <MudDivider DividerType="DividerType.Middle" Class="my-6" />
            <MudText Typo="Typo.body1">@langLoc["PreachHourTime"]: @ComputeDisplayPreachHours()</MudText>
            <br />
            <MudRadioGroup @bind-SelectedOption="@prData.PreachTimeRadio">
                <MudRadio Option="(int)PreachRadioEnum.Hours" Color="Color.Primary" UnCheckedColor="Color.Default" Dense="true">@langLoc["PreachTimePicker_Editable"]</MudRadio>
                <MudRadio Option="(int)PreachRadioEnum.Period" Color="Color.Primary" UnCheckedColor="Color.Default" Dense="false">@langLoc["PreachTimePicker_Dialog"]</MudRadio>
            </MudRadioGroup>
            @if (@prData.PreachTimeRadio == (int)PreachRadioEnum.Hours)
            {
                <MudNumericField @bind-Value="prData.PreachMinute" Label="@langLoc["PreachTimeLabel"]"
                             Variant="Variant.Outlined" Min="0" Max="1440" />

            }
            else
            {
                <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="Start" Time="@startTime" TimeChanged="StartTimespanToHour" />
                <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="End" Time="@endTime" TimeChanged="EndTimespanToHour" />
                <br />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="AddPeriod">@langLoc["AddPeriod"]</MudButton>
            }
        </MudPaper>
    </MudItem>

    @if (prData.PreachTimeRadio == (int)PreachRadioEnum.Period)
    {
        @if (prData.PreachReportTimes.Count()>0)
        {
            <MudText Typo="Typo.h6">@langLoc["TimePeriodTitle"]</MudText>
            @for (int i = 0; i < prData.PreachReportTimes.Count(); i++)
            {
                var period = prData.PreachReportTimes[i];
                var pNo = i;
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="4" Width="280px">
                        <MudText Typo="Typo.h6">#@pNo</MudText>
                        <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="Start"
                           Time="period.StartTime.Subtract(prData.PreachDate)"
                           TimeChanged="StartTimespanToHour" />
                        <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="End"
                           Time="period.EndTime.Subtract(prData.PreachDate)"
                           TimeChanged="EndTimespanToHour" />
                        <br />
                        <div class="d-flex justify-space-between flex-grow-1 gap-4">
                            <MudText Typo="Typo.body1">@langLoc["PreachHourTime"]: @Math.Round(period.EndTime.Subtract(period.StartTime).TotalHours, 2)</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Primary" Size="Size.Small" OnClick="@(()=>DeletePeriod(pNo))" />
                        </div>
                    </MudPaper>
                </MudItem>
            }
        }
    }
</MudStack>

@code {
    private DateTime displayPreachDate = DateTime.Today;
    private DateTime maxDate = DateTime.Today;
    private TimeSpan? startTime = new TimeSpan(09, 30, 00);
    private TimeSpan? endTime = new TimeSpan(11, 30, 00);
    private PreachReportData prData = new PreachReportData();
    private PreachReportMonthData prMonthData = new PreachReportMonthData();
    private bool isLoading = false;
    private bool firstRun = true;
    private int monthDistributeNum = 0;
    private int monthMediaPlayNum = 0;
    private int monthReviewNum = 0;
    private int monthBibleStudyNum = 0;
    private double monthHours = 0;
    private int month = 0;

    protected override async Task OnInitializedAsync()
    {
        logger.LogDebug("Index OnInitializedAsync()");
        prData.PreachReportTimes = new List<PreachReportTimePeriod>();
        prMonthData.MonthData = new List<PreachReportData>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //var timeSpan = await TimezoneUtil.GetTimezoneOffset(jsRuntime);
            //testTime = DateTime.UtcNow.Add(timeSpan);
            await Init();
            logger.LogDebug("Index OnAfterRenderAsync() prData.PreachDate: " + prData.PreachDate);
            //await InvokeAsync(() => StateHasChanged());
        }

    }

    private async Task Init()
    {
        DateTimeOffset clientTime = await BlazorTimeUtil.GetClientDate(jsRuntime);
        displayPreachDate = clientTime.DateTime;
        maxDate = clientTime.DateTime;
        await InitPreachReportData(clientTime);
    }

    private async Task InitPreachReportData(DateTimeOffset dateTimeOffset)
    {
        isLoading = true;
        StateHasChanged();
        var mm = await GetPreachReportData(dateTimeOffset);
        if (mm.Success)
        {
            prMonthData = mm.Data;
            prData = GetSingleDateData(prMonthData, dateTimeOffset);
            SetMonthDisplayData(prMonthData);
            await InvokeAsync(() => StateHasChanged());
        }
        else
        {
            prData = new PreachReportData();
            prData.PreachDate = dateTimeOffset;
            logger.LogDebug("Index InitPreachReportData() prData.PreachDate: " + prData.PreachDate);
            prData.ReviewNum = 0;
            prData.BibleStudyNum = 0;
            prData.MediaPlayNum = 0;
            prData.DistributeNum = 0;
            prData.PreachReportTimes = new List<PreachReportTimePeriod>();
            prData.UpdateTime = dateTimeOffset;
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task<MessageModel<PreachReportMonthData>> GetPreachReportData(DateTimeOffset dateTimeOffset)
    {
        try
        {
            return await preachReportService.Get(dateTimeOffset);
        }
        catch(Exception ex)
        {
            //似乎token過期，透過MicrosoftIdentityConsentAndConditionalAccessHandler觸發重登入
            ConsentHandler.HandleException(ex);
        }
        return new MessageModel<PreachReportMonthData>
        {
            Success = false
        };
    }

    private PreachReportData GetSingleDateData(PreachReportMonthData monthData, DateTimeOffset dateTimeOffset)
    {
        var res = monthData.MonthData.SingleOrDefault(x=>x.PreachDate.Day==dateTimeOffset.Day);
        if(res==null)
        {
            return new PreachReportData 
            {
                    PreachReportTimes = new List<PreachReportTimePeriod>()
            };
        }
        return res;
    }

    private void SetMonthDisplayData(PreachReportMonthData data)
    {
        monthDistributeNum = data.MonthData.Sum(x => x.DistributeNum);
        monthMediaPlayNum = data.MonthData.Sum(x => x.MediaPlayNum);
        monthReviewNum = data.MonthData.Sum(x => x.ReviewNum);
        monthBibleStudyNum = data.MonthData.Sum(x => x.BibleStudyNum);
        monthHours = Math.Round(data.MonthData.Sum(x => x.PreachMinute) / 60, 2);
        month = displayPreachDate.Month;
    }

    private async Task PreachDateChanged(DateTime? date)
    {
        if (firstRun)
        {
            firstRun = false;
        }
        else
        {
            //await Update();
            displayPreachDate = date.Value;
            var timeSpan = await BlazorTimeUtil.GetClientTimezoneOffset(jsRuntime);
            await InitPreachReportData(new DateTimeOffset(date.Value, timeSpan));
        }
        //logger.LogDebug("Index PreachDateChanged() prData.PreachDate: " + prData.PreachDate);
    }

    private void StartTimespanToHour(TimeSpan? timeSpan)
    {
        startTime = timeSpan;
        if (startTime > endTime)
        {
            endTime = startTime;
        }
    }

    private void EndTimespanToHour(TimeSpan? timeSpan)
    {
        endTime = timeSpan;
        if (startTime > endTime)
        {
            startTime = endTime;
        }
    }

    private void ReviewNumChk()
    {
        if (prData.BibleStudyNum > 0 && prData.ReviewNum == 0)
        {
            prData.ReviewNum = 1;
        }
    }

    private void BibleStudyNumChanged(int val)
    {
        prData.BibleStudyNum = val;
        if (prData.BibleStudyNum > 0 && prData.ReviewNum == 0)
        {
            prData.ReviewNum++;
        }
    }

    private void AddPeriod()
    {
        var st = prData.PreachDate.Add((TimeSpan)startTime);
        var et = prData.PreachDate.Add((TimeSpan)endTime);
        if (prData.PreachReportTimes.Any(
            x => (st >= x.StartTime && st <= x.EndTime) || (et >= x.StartTime && et <= x.EndTime) ||
                    (st < x.StartTime && et > x.EndTime)))
        {
            ShowAlert(langLoc["PeriodConflictAlert"], Severity.Error);
        }
        else
        {
            prData.PreachReportTimes.Add(new PreachReportTimePeriod
                {
                    StartTime = st,
                    EndTime = et
                });
            ShowAlert(langLoc["AddPeriodSuccess"], Severity.Info);
        }
    }

    private async Task Update()
    {
        isLoading = true;
        StateHasChanged();
        var old = prMonthData.MonthData.SingleOrDefault(x => x.PreachDate.Day == prData.PreachDate.Day);
        if(old!=null)
        {
            prMonthData.MonthData.Remove(old);
        }
        prMonthData.MonthData.Add(prData);
        var mm = await UpdatePreachReportData(prMonthData);
        isLoading = false;
        StateHasChanged();
        if (mm.Success)
        {
            ShowAlert(langLoc["UpdateSuccess"], Severity.Success);
        }
        else
        {
            ShowAlert(langLoc["UpdateFail"], Severity.Error);
        }
    }

    private async Task<MessageModel<bool>> UpdatePreachReportData(PreachReportMonthData data)
    {
        try
        {
            return await preachReportService.Update(data);
        }
        catch(Exception ex)
        {
            //似乎token過期，透過MicrosoftIdentityConsentAndConditionalAccessHandler觸發重登入
            ConsentHandler.HandleException(ex);
        }
        return new MessageModel<bool>
        {
            Success = false
        };
    }

    private PreachReportData GetDataFromCloud()
    {
        return null;
    }

    private void DeletePeriod(int pNo)
    {
        prData.PreachReportTimes.RemoveAt(pNo);
    }

    private void ShowAlert(string msg, Severity severity)
    {
        snackbar.Clear();
        snackbar.Configuration.VisibleStateDuration = 2000;
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        snackbar.Add(msg, severity);
    }

    private double ComputeDisplayPreachHours()
    {
        if (prData.PreachTimeRadio == (int)PreachRadioEnum.Hours)
        {
            return Math.Round(prData.PreachMinute / 60, 2);
        }
        else
        {
            var hours = prData.PreachReportTimes.Sum(x =>
                x.EndTime.DateTime.Subtract(x.StartTime.DateTime).TotalHours);
            return Math.Round(hours, 2);
        }
    }
}