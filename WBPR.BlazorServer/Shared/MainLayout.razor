@inherits LayoutComponentBase
@using System.Globalization
@using WBPR.Service.Models.Common
@using WBPR.Service.Interfaces
@using WBPR.BlazorServer.Utils
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime jsRuntime
@inject ISettingService settingService
@inject NavigationManager navigation
@attribute [Authorize]

<PageTitle>WBPR.BlazorServer</PageTitle>

<MudThemeProvider Theme="@MyCustomTheme" @bind-IsDarkMode="@blazorUiInfo.IsDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleNavMenu())" />
        <MudSpacer />
        @*<MudIconButton Icon="@lighOrDarkIcon" Color="Color.Inherit" OnClick="@ToggleDarkMode" />*@
        @*<MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />*@
        @*<MudText>@testLang</MudText>*@
        <LoginDisplay />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">報告</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">

            @*層級傳遞參數*@
            <CascadingValue Value="@blazorUiInfo">
                @Body
            </CascadingValue>
            
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private string lighOrDarkIcon = Icons.Filled.LightMode;
    private BlazorUiInfo blazorUiInfo = new BlazorUiInfo();
    //private string testLang = "XX";

    protected override async Task OnInitializedAsync()
    {
        var darkRes = await settingService.IsDarkTheme();
        blazorUiInfo.IsDarkMode = darkRes.Data;
        //blazorUiInfo.IsDarkMode = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Init();
        }   
    }

    private async Task Init()
    {
        await SetLang();

        //var darkRes = await settingService.IsDarkTheme();
        //blazorUiInfo.IsDarkMode = darkRes.Data;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task SetLang()
    {
        //取得瀏覽器語系。 ***取得的瀏覽器語系不是預期的zh-hant而是zh-tw
        string browserLang = await JsUtil.GetBrowserLang(jsRuntime);
        //查看瀏覽器語系與儲存的語系是否相同
        var res = await settingService.GetLang();    
        if(res.Success)
        {
            string setLang = res.Data;
            if (setLang == browserLang)
            {
                return;
            }
        }
        //語系存入localstorage
        await settingService.SetLang(browserLang);
        //設定語系
        var uri = new Uri(navigation.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var cultureEscaped = Uri.EscapeDataString(browserLang);//.Split('-')[0]
        var uriEscaped = Uri.EscapeDataString(uri);
        navigation.NavigateTo(
            $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
            forceLoad: true);
    }

    private void ToggleNavMenu()
    {
        _drawerOpen = !_drawerOpen;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Noto Sans TC", "微軟正黑體", "sans-serif" }
                }
            },

            Palette = new Palette()
            {
                Primary = "#2196F3",
                Secondary = Colors.Green.Accent4,
                AppbarBackground = "#2196F3"
            },

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px"
            }
        };
}